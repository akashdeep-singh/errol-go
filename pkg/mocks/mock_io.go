// Code generated by MockGen. DO NOT EDIT.
// Source: io.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIO is a mock of IO interface
type MockIO struct {
	ctrl     *gomock.Controller
	recorder *MockIOMockRecorder
}

// MockIOMockRecorder is the mock recorder for MockIO
type MockIOMockRecorder struct {
	mock *MockIO
}

// NewMockIO creates a new mock instance
func NewMockIO(ctrl *gomock.Controller) *MockIO {
	mock := &MockIO{ctrl: ctrl}
	mock.recorder = &MockIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIO) EXPECT() *MockIOMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockIO) Write(writer interface{}, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", writer, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockIOMockRecorder) Write(writer, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIO)(nil).Write), writer, data)
}

// Read mocks base method
func (m *MockIO) Read(reader interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockIOMockRecorder) Read(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIO)(nil).Read), reader)
}
