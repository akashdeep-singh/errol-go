// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockServer) Initialize(portNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", portNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockServerMockRecorder) Initialize(portNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockServer)(nil).Initialize), portNumber)
}

// GetConnectedClients mocks base method
func (m *MockServer) GetConnectedClients() []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedClients")
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// GetConnectedClients indicates an expected call of GetConnectedClients
func (mr *MockServerMockRecorder) GetConnectedClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedClients", reflect.TypeOf((*MockServer)(nil).GetConnectedClients))
}

// Exit mocks base method
func (m *MockServer) Exit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Exit indicates an expected call of Exit
func (mr *MockServerMockRecorder) Exit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockServer)(nil).Exit))
}
