// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateConnection mocks base method
func (m *MockClient) CreateConnection(portNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", portNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConnection indicates an expected call of CreateConnection
func (mr *MockClientMockRecorder) CreateConnection(portNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockClient)(nil).CreateConnection), portNumber)
}

// Disconnect mocks base method
func (m *MockClient) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockClientMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect))
}

// WhoAmI mocks base method
func (m *MockClient) WhoAmI() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI")
	ret0, _ := ret[0].(error)
	return ret0
}

// WhoAmI indicates an expected call of WhoAmI
func (mr *MockClientMockRecorder) WhoAmI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockClient)(nil).WhoAmI))
}

// GetConnectedClients mocks base method
func (m *MockClient) GetConnectedClients() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedClients")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectedClients indicates an expected call of GetConnectedClients
func (mr *MockClientMockRecorder) GetConnectedClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedClients", reflect.TypeOf((*MockClient)(nil).GetConnectedClients))
}

// RelayMessage mocks base method
func (m *MockClient) RelayMessage(receivers []uint64, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayMessage", receivers, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayMessage indicates an expected call of RelayMessage
func (mr *MockClientMockRecorder) RelayMessage(receivers, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayMessage", reflect.TypeOf((*MockClient)(nil).RelayMessage), receivers, payload)
}
