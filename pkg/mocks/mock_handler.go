// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/akashdeep-singh/errol/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRequestHandler is a mock of RequestHandler interface
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// WhoAmI mocks base method
func (m *MockRequestHandler) WhoAmI(id uint64) models.WhoAmIResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", id)
	ret0, _ := ret[0].(models.WhoAmIResponse)
	return ret0
}

// WhoAmI indicates an expected call of WhoAmI
func (mr *MockRequestHandlerMockRecorder) WhoAmI(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockRequestHandler)(nil).WhoAmI), id)
}

// GetConnectedClients mocks base method
func (m *MockRequestHandler) GetConnectedClients(id uint64, clients []uint64) models.GetConnectedClientsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedClients", id, clients)
	ret0, _ := ret[0].(models.GetConnectedClientsResponse)
	return ret0
}

// GetConnectedClients indicates an expected call of GetConnectedClients
func (mr *MockRequestHandlerMockRecorder) GetConnectedClients(id, clients interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedClients", reflect.TypeOf((*MockRequestHandler)(nil).GetConnectedClients), id, clients)
}

// Relay mocks base method
func (m *MockRequestHandler) Relay(request models.RelayRequest) models.RelayResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relay", request)
	ret0, _ := ret[0].(models.RelayResponse)
	return ret0
}

// Relay indicates an expected call of Relay
func (mr *MockRequestHandlerMockRecorder) Relay(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relay", reflect.TypeOf((*MockRequestHandler)(nil).Relay), request)
}
