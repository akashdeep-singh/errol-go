// Code generated by MockGen. DO NOT EDIT.
// Source: response.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/akashdeep-singh/errol-go/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResponseCodec is a mock of ResponseCodec interface
type MockResponseCodec struct {
	ctrl     *gomock.Controller
	recorder *MockResponseCodecMockRecorder
}

// MockResponseCodecMockRecorder is the mock recorder for MockResponseCodec
type MockResponseCodecMockRecorder struct {
	mock *MockResponseCodec
}

// NewMockResponseCodec creates a new mock instance
func NewMockResponseCodec(ctrl *gomock.Controller) *MockResponseCodec {
	mock := &MockResponseCodec{ctrl: ctrl}
	mock.recorder = &MockResponseCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseCodec) EXPECT() *MockResponseCodecMockRecorder {
	return m.recorder
}

// EncodeResponse mocks base method
func (m *MockResponseCodec) EncodeResponse(response models.Response) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeResponse", response)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// EncodeResponse indicates an expected call of EncodeResponse
func (mr *MockResponseCodecMockRecorder) EncodeResponse(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeResponse", reflect.TypeOf((*MockResponseCodec)(nil).EncodeResponse), response)
}

// DecodeResponse mocks base method
func (m *MockResponseCodec) DecodeResponse(encoded []byte) (models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeResponse", encoded)
	ret0, _ := ret[0].(models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeResponse indicates an expected call of DecodeResponse
func (mr *MockResponseCodecMockRecorder) DecodeResponse(encoded interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeResponse", reflect.TypeOf((*MockResponseCodec)(nil).DecodeResponse), encoded)
}
